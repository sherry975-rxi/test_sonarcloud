package edu.ncsu.csc216.collections.list;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Test class for sorted list.  Tests various method calls of sorted list to ensure
 * all methods are functioning properly as as described by the SortedList API
 * @author Christopher Wagner
 *
 */

public class SortedListTest {

	/**
	 * Tests that a list is generated by adding elements to the list
	 */
	@Test
	public void testSortedList() {
		SortedList<String> list = new SortedList<String>();
		assertEquals(0, list.size());
		assertFalse(list.contains("apple"));

		// Test that the list grows by adding at least 11 elements
		//Note: initial capacity is 10 elements
		list.add("banana");
		list.add("orange");
		list.add("grape");
		list.add("kiwi");
		list.add("watermelon");
		list.add("grapefruit");
		list.add("pineapple");
		list.add("cherry");
		list.add("blackberry");
		list.add("raspberry");
		list.add("tangerine");
		assertEquals(11, list.size());

	}

	/**
	 * Test adding elements to the front, middle and back of the list, adding a null element, and adding a 
	 * duplicate element.
	 */
	@Test
	public void testAdd() {
		SortedList<String> list = new SortedList<String>();

		list.add("banana");
		assertEquals(1, list.size());
		assertEquals("banana", list.get(0));

		// Test adding to the front, middle and back of the list
		list.add("apple");
		list.add("apricot");
		list.add("cantalope");
		assertEquals("apple", list.get(0));
		assertEquals("apricot", list.get(1));
		assertEquals("banana", list.get(2));
		assertEquals("cantalope", list.get(3));

		// Test adding a null element
		try {
			list.add(null);
			fail("Should not have added a null element");
		} catch (NullPointerException e) {
			assertEquals("apple", list.get(0));
			assertEquals("apricot", list.get(1));
			assertEquals("banana", list.get(2));
			assertEquals("cantalope", list.get(3));
		}

		// Test adding a duplicate element
		try{
			list.add("banana");
		} catch (IllegalArgumentException e) {
		assertEquals("apple", list.get(0));
		assertEquals("apricot", list.get(1));
		assertEquals("banana", list.get(2));
		assertEquals("cantalope", list.get(3));
		}
	}

	/**
	 * Tests getting an element from an empty list, getting an element as an index less than 0, and getting
	 * an element at an index equal to the size of the list.
	 */
	@Test
	public void testGet() {
		SortedList<String> list = new SortedList<String>();

		// Since get() is used throughout the tests to check the
		// contents of the list, we don't need to test main flow functionality
		// here. Instead this test method should focus on the error
		// and boundary cases.

		// Test getting an element from an empty list
		try {
			list.get(0);
		} catch (IndexOutOfBoundsException e) {
			assertEquals(0, list.size());
		}
		
		// Add some elements to the list
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		// Test getting an element at an index < 0
		try {
			list.get(list.size() - 5);
		} catch (IndexOutOfBoundsException e ) {
			assertEquals("apple", list.get(0));
			assertEquals("apricot", list.get(1));
			assertEquals("banana", list.get(2));
			assertEquals("grapefruit", list.get(3));
		}
		// Test getting an element at size
		try {
			list.get(list.size());
		} catch (IndexOutOfBoundsException e) {
			assertEquals("apple", list.get(0));
			assertEquals("apricot", list.get(1));
			assertEquals("banana", list.get(2));
			assertEquals("grapefruit", list.get(3));
		}
	}

	/**
	 * Tests removing an element from an empty list, removing an element at an index less than 0, 
	 * removing an element from the middle of the list, removing the last element, and 
	 * removing an element at an index equal to the size of the list.
	 */
	@Test
	public void testRemove() {
		SortedList<String> list = new SortedList<String>();

		// Test removing from an empty list
		try {
			list.remove(0);
		} catch (IndexOutOfBoundsException e) {
			assertEquals(0, list.size());
		}
		// Add some elements to the list - at least 4
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		// Test removing an element at an index < 0
		try {
			list.remove(list.size() - 5);
		} catch (IndexOutOfBoundsException e) {
			assertEquals("apple", list.get(0));
			assertEquals("apricot", list.get(1));
			assertEquals("banana", list.get(2));
			assertEquals("grapefruit", list.get(3));
		}
		//  Test removing an element at size
		try {
			list.remove(list.size());
		} catch (IndexOutOfBoundsException e) {
			assertEquals("apple", list.get(0));
			assertEquals("apricot", list.get(1));
			assertEquals("banana", list.get(2));
			assertEquals("grapefruit", list.get(3));
		}
		//  Test removing a middle element
		list.remove(2);
		assertEquals("apple", list.get(0));
		assertEquals("apricot", list.get(1));
		assertEquals("grapefruit", list.get(2));
		//  Test removing the last element
		list.remove(2);
		assertEquals("apple", list.get(0));
		assertEquals("apricot", list.get(1));
		//  Test removing the first element
		list.remove(0);
		assertEquals("apricot", list.get(0));
		//  Test removing the last element
		list.remove(0);
		assertEquals(0, list.size());
	}

	/**
	 * Test the index of an item in an empty list, and index of various elements that are in the list and not
	 * in the list.  Additionally, test if the index is null.
	 */
	@Test
	public void testIndexOf() {
		SortedList<String> list = new SortedList<String>();

		//  Test indexOf on an empty list
		try {
			list.indexOf("banana");
		} catch (IndexOutOfBoundsException e) {
			assertEquals (0, list.size());
		}
		//  Add some elements
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		//  Test various calls to indexOf for elements in the list
		// and not in the list
		int index = list.indexOf("apple");
		assertEquals(0, index);
		try {
			index = list.indexOf("grape");
		} catch	(NullPointerException e) {
			assertEquals(0, index);
		}
		//  Test checking the index of null
		try {
			index = list.indexOf(null);
		} catch (NullPointerException e) {
			assertEquals(-1, index);
		}
	}

	/**
	 * test the clear() method to ensure it removes all elements in the list.
	 */
	@Test
	public void testClear() {
		SortedList<String> list = new SortedList<String>();

		//  Add some elements
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		//  Clear the list
		list.clear();
		//  Test that the list is empty
		assertEquals(0, list.size());
	}

	/**
	 * Test isEmpty to ensure an empty list returns true and false if the list contains elements
	 */
	@Test
	public void testIsEmpty() {
		SortedList<String> list = new SortedList<String>();

		//  Test that the list starts empty
		assertTrue(list.isEmpty());
		//  Add at least one element
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		//  Check that the list is no longer empty
		assertFalse(list.isEmpty());
	}

	/**
	 * Test contains() method to determine if a list contains items that are in the list returning true, or
	 * false if the item is not in the list.
	 */
	@Test
	public void testContains() {
		SortedList<String> list = new SortedList<String>();

		//  Test the empty list case
		assertFalse(list.contains("apple"));
		//  Add some elements
		list.add("apple");
		list.add("banana");
		list.add("grapefruit");
		list.add("apricot");
		//  Test some true and false cases
		assertTrue(list.contains("apple"));
		assertTrue(list.contains("grapefruit"));
		assertFalse(list.contains("peanut"));
		assertFalse(list.contains("lettuce"));
	}

	/**
	 * Test if two list are equivalent or different based on the elements and position of the
	 * elements in the list.
	 */
	@Test
	public void testEquals() {
		SortedList<String> list1 = new SortedList<String>();
		SortedList<String> list2 = new SortedList<String>();
		SortedList<String> list3 = new SortedList<String>();

		//  Make two lists the same and one list different
		list1.add("apple");
		list1.add("banana");
		list1.add("grapefruit");
		list1.add("apricot");
		
		list2.add("apple");
		list2.add("banana");
		list2.add("grapefruit");
		list2.add("apricot");
		
		list3.add("grape");
		list3.add("raspberry");
		list3.add("kiwi");
		list3.add("pineapple");
		//  Test for equality and non-equality
		assertTrue(list1.equals(list2));
		assertFalse(list1.equals(list3));
		assertFalse(list2.equals(list3));
		assertTrue(list2.equals(list1));
	}
	/**
	 * Test if the HashCode of two similar test are equal and two different test are not equal.
	 */
	@Test
	public void testHashCode() {
		SortedList<String> list1 = new SortedList<String>();
		SortedList<String> list2 = new SortedList<String>();
		SortedList<String> list3 = new SortedList<String>();

		//  Make two lists the same and one list different
		list1.add("apple");
		list1.add("banana");
		list1.add("grapefruit");
		list1.add("apricot");
		
		list2.add("apple");
		list2.add("banana");
		list2.add("grapefruit");
		list2.add("apricot");
		
		list3.add("grape");
		list3.add("raspberry");
		list3.add("kiwi");
		list3.add("pineapple");
		//  Test for the same and different hashCodes
		assertTrue(list1.hashCode() == list2.hashCode());
		assertTrue(list2.hashCode() == list1.hashCode());
		assertFalse(list1.hashCode() == list3.hashCode());
		assertFalse(list2.hashCode() == list3.hashCode());
		assertFalse(list3.hashCode() == list1.hashCode());
		assertFalse(list3.hashCode() == list2.hashCode());
	}

}
